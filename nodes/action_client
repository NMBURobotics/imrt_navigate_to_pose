#!/usr/bin/env python

from pickle import TRUE
import rospy
import actionlib

from imrt_navigate_to_pose.msg import NavigateToPoseAction
from imrt_navigate_to_pose.msg import NavigateToPoseGoal
from actionlib_msgs.msg import GoalStatus


from tf.transformations import quaternion_from_euler
from geometry_msgs.msg import Quaternion


class NavigateToPoseClientNode():
    def __init__(self, *args):
        self.action_client = actionlib.SimpleActionClient(
            "/navigate_to_pose", NavigateToPoseAction)
        self.action_client.wait_for_server()
        rospy.loginfo("We have connected to action server")

    def feedback_callback(self, feedback):
        rospy.loginfo("The Feedback is %s" % str(feedback))

    def test_action_server(self):
        rospy.loginfo("We are making a navigation request")
        goal = NavigateToPoseGoal()
        goal.goal_pose.header.frame_id = "odom"
        goal.goal_pose.header.stamp = rospy.Time().now()
        goal.goal_pose.pose.position.x = 4
        goal.goal_pose.pose.position.y = -5
        goal.goal_pose.pose.orientation = Quaternion(
            *quaternion_from_euler(0, 0, 1.57))

        self.action_client.send_goal(goal, feedback_cb=self.feedback_callback)

        rate = rospy.Rate(1)
        while self.action_client.get_state() != GoalStatus().SUCCEEDED:
            rospy.loginfo("The goal is still processing ...")
            rate.sleep()
            # if obstacle_detected:
            #    self.action_client.cancel_goal() #PAUSE
        rospy.loginfo("Hooray! got on the right pose ...")


def main():
    rospy.init_node("NavigateToPoseClientNode")
    action_client = NavigateToPoseClientNode()
    action_client.test_action_server()

    rospy.spin()


if __name__ == '__main__':
    main()
